// Code generated by protoc-gen-go. DO NOT EDIT.
// source: db_agent_server.proto

package dbagent

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DbAgentServer service

type DbAgentServerClient interface {
	GetOneTestUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*TestUser, error)
	GetAllTestUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*ListUser, error)
}

type dbAgentServerClient struct {
	cc *grpc.ClientConn
}

func NewDbAgentServerClient(cc *grpc.ClientConn) DbAgentServerClient {
	return &dbAgentServerClient{cc}
}

func (c *dbAgentServerClient) GetOneTestUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*TestUser, error) {
	out := new(TestUser)
	err := grpc.Invoke(ctx, "/dbagent.DbAgentServer/GetOneTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dbAgentServerClient) GetAllTestUser(ctx context.Context, in *StringValue, opts ...grpc.CallOption) (*ListUser, error) {
	out := new(ListUser)
	err := grpc.Invoke(ctx, "/dbagent.DbAgentServer/GetAllTestUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DbAgentServer service

type DbAgentServerServer interface {
	GetOneTestUser(context.Context, *StringValue) (*TestUser, error)
	GetAllTestUser(context.Context, *StringValue) (*ListUser, error)
}

func RegisterDbAgentServerServer(s *grpc.Server, srv DbAgentServerServer) {
	s.RegisterService(&_DbAgentServer_serviceDesc, srv)
}

func _DbAgentServer_GetOneTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAgentServerServer).GetOneTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbagent.DbAgentServer/GetOneTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAgentServerServer).GetOneTestUser(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _DbAgentServer_GetAllTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DbAgentServerServer).GetAllTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dbagent.DbAgentServer/GetAllTestUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DbAgentServerServer).GetAllTestUser(ctx, req.(*StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _DbAgentServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dbagent.DbAgentServer",
	HandlerType: (*DbAgentServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOneTestUser",
			Handler:    _DbAgentServer_GetOneTestUser_Handler,
		},
		{
			MethodName: "GetAllTestUser",
			Handler:    _DbAgentServer_GetAllTestUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db_agent_server.proto",
}

func init() { proto.RegisterFile("db_agent_server.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0x49, 0x8a, 0x4f,
	0x4c, 0x4f, 0xcd, 0x2b, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x4f, 0x49, 0x02, 0x8b, 0x4a, 0x71, 0x25, 0x25, 0x16, 0xa7, 0x42, 0x04, 0xa5,
	0xf8, 0x4b, 0x52, 0x8b, 0x4b, 0xe2, 0x4b, 0x8b, 0x61, 0xaa, 0x8c, 0x3a, 0x19, 0xb9, 0x78, 0x5d,
	0x92, 0x1c, 0x41, 0x0a, 0x83, 0xc1, 0xba, 0x85, 0xac, 0xb9, 0xf8, 0xdc, 0x53, 0x4b, 0xfc, 0xf3,
	0x52, 0x43, 0x52, 0x8b, 0x4b, 0x42, 0x8b, 0x53, 0x8b, 0x84, 0x44, 0xf4, 0xa0, 0x46, 0xe9, 0x05,
	0x97, 0x14, 0x65, 0xe6, 0xa5, 0x87, 0x25, 0xe6, 0x94, 0xa6, 0x4a, 0x09, 0xc2, 0x45, 0x61, 0x0a,
	0x95, 0x18, 0xa0, 0x9a, 0x1d, 0x73, 0x72, 0x88, 0xd6, 0xec, 0x93, 0x09, 0xd3, 0x9c, 0xc4, 0x06,
	0x76, 0x92, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x99, 0x9d, 0x81, 0xc1, 0xd1, 0x00, 0x00, 0x00,
}
